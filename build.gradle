/**
 * This is a standalone project that does not depend on any master configuration.
 * 
 * To use nexus, create a ~/.gradle/gradle.properties file with this contents
 *    nexusLocation=http://lechuck:8558/nexus/content/groups/public
 *
 * required gradle version: 0.8
 */
 
usePlugin 'java'
usePlugin 'maven'

project.group='org.extrema-sistemas'
project.version='0.8.2-SNAPSHOT'

defaultTasks 'buildAll'

this.appengineHome = System.getenv('APPENGINE_HOME') 
if (!this.appengineHome) {
	ant.fail """
	Cannot find Appengine home. 
	Either set the appengineHome property or the APPENGINE_HOME environment variable to the root folder:
	
	gradle -P appengineHome=/usr/local/java/appengine-java-sdk-1.2.5/
	export APPENGINE_HOME=/usr/local/java/appengine-java-sdk-1.2.5/
	"""
}

configurations {
    deployerJars
    sources
    sources.exclude group: 'com.google.appengine'
    sources.exclude module: 'appengine-local-runtime'
}

repositories {
	if (project.hasProperty('nexusLocation')) {
		mavenRepo name: 'nexus', urls: nexusLocation
	}

    mavenCentral()
    flatDir name: 'appenginehome-libs', dirs: [ this.appengineHome + '/lib/impl'/*, this.appengineHome + '/lib/user'*/ ]
}

dependencies {

    deployerJars "org.apache.maven.wagon:wagon-ssh:1.0-beta-2"
	/*
	":appengine-api-labs",
					":appengine-local-runtime",
					":appengine-api-stubs",
					*/
	compile			":appengine-local-runtime",
					"com.google.appengine:appengine-api-1.0-labs:1.3.0",
					"com.google.appengine:appengine-api-1.0-stubs:1.3.0",
					"com.google.appengine:appengine-api-1.0-sdk:1.3.0",
					"com.google.collections:google-collections:1.0",
					"commons-logging:commons-logging:1.1.1",
					"aopalliance:aopalliance:1.0",
					"org.aspectj:aspectjrt:1.6.6",
					"org.aspectj:aspectjweaver:1.6.6",
					"org.springframework:spring-aop:3.0.0.RELEASE",
					"org.springframework:spring-asm:3.0.0.RELEASE",
					"org.springframework:spring-beans:3.0.0.RELEASE",
					"org.springframework:spring-core:3.0.0.RELEASE",
					"org.apache.geronimo.specs:geronimo-jpa_3.0_spec:1.1.1"
					
	testCompile		"junit:junit:4.5",
					"org.springframework:spring-context:3.0.0.RELEASE",
					"org.springframework:spring-expression:3.0.0.RELEASE",
					"org.springframework:spring-test:3.0.0.RELEASE",
					"log4j:log4j:1.2.14"
	    
}

// --- start of copy from Loom master ---
task 'cleanGenlib' << { 
	ant.delete(dir: "${projectDir}/src/main/genlib")
	ant.delete(dir: "${projectDir}/src/test/genlib")
}
clean.dependsOn cleanGenlib

task 'genlib'(description: 'Copies the 3rd party libraries to genlib folder') << {
	
	// Hack to copy the source files 
	def calculateSourceFiles = { fileset ->
		def conf = fileset.copyRecursive { it instanceof ExternalModuleDependency }
		conf.extendsFrom(configurations.sources)
		conf.dependencies.each { dep ->
			dep.artifact {
				group = dep.group
				name = dep.name
				version = dep.version
				classifier = 'sources'
				type = 'jar'
			}
		}
		return conf;
	} 
	
	project.copy {
		from configurations.compile.files
        from calculateSourceFiles(configurations.compile)
        into 'src/main/genlib'
    }
    
	project.copy {
		from configurations.testCompile.files
        from calculateSourceFiles(configurations.testRuntime)
        into 'src/test/genlib'
    }
}
// --- end of copy from Loom master ---


/*
uploadArchives {
    repositories.mavenDeployer {
        name = 'sshDeployer' // optional
        configuration = configurations.deployerJars
        repository(url: "scp://repos.mycompany.com/releases") {
            authentication(userName: "me", password: "myPassword")
        }
    }
}*/

task 'buildAll' (dependsOn: [build, javadoc]) << {
	ant.zip(
		destfile: "build/docs/simpleds-${project.version}-javadoc.zip", 
		basedir: 'build/docs', 
		includes: 'javadoc/**'
	)
}