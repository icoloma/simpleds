/**
 * This is a standalone project that does not depend on any master configuration.
 * 
 * To use nexus, create a ~/.gradle/gradle.properties file with this contents
 *    nexusLocation=http://lechuck:8558/nexus/content/groups/public
 *
 * To install to the local repository: gradle install
 * To upload to the maven repository: gradle upload
 *
 * required gradle version: 0.8
 */
 
usePlugin 'java'
usePlugin 'maven'

project.group='org.extrema-sistemas'
project.version='0.9-SNAPSHOT'

defaultTasks 'build'

this.appengineHome = System.getenv('APPENGINE_HOME') 
if (!this.appengineHome) {
	ant.fail """
	Cannot find Appengine home. 
	Either set the appengineHome property or the APPENGINE_HOME environment variable to the root folder:
	
	gradle -P appengineHome=/usr/local/java/appengine-java-sdk-1.2.5/
	export APPENGINE_HOME=/usr/local/java/appengine-java-sdk-1.2.5/
	"""
}
	
configurations {
    deployerJars
    
    // exclude source files for certain libraries
    sources { description = 'Source files for the libraries' }
    sources.exclude group: 'com.google.appengine'
    sources.exclude module: 'appengine-local-runtime'
    
    // pending http://jira.codehaus.org/browse/GRADLE-471
    providedCompile
}

repositories {
	if (project.hasProperty('nexusLocation')) {
		mavenRepo name: 'nexus', urls: nexusLocation
	}

    mavenCentral()
    flatDir name: 'appenginehome-libs', dirs: [ this.appengineHome + '/lib/impl'/*, this.appengineHome + '/lib/user'*/ ]
}
	
dependencies {

    deployerJars	"org.apache.maven.wagon:wagon-ssh:1.0-beta-2"
	
	providedCompile	":appengine-local-runtime",
					"com.google.appengine:appengine-api-1.0-labs:1.3.0",
					"com.google.appengine:appengine-api-1.0-stubs:1.3.0",
					"com.google.appengine:appengine-api-1.0-sdk:1.3.0"
	
	compile			"com.google.collections:google-collections:1.0",
					"commons-logging:commons-logging:1.1.1",
					"aopalliance:aopalliance:1.0",
					"org.aspectj:aspectjrt:1.6.6",
					"org.aspectj:aspectjweaver:1.6.6",
					"org.springframework:spring-aop:3.0.0.RELEASE",
					"org.springframework:spring-asm:3.0.0.RELEASE",
					"org.springframework:spring-beans:3.0.0.RELEASE",
					"org.springframework:spring-core:3.0.0.RELEASE",
					"org.apache.geronimo.specs:geronimo-jpa_3.0_spec:1.1.1"
					
	testCompile		"junit:junit:4.5",
					"org.springframework:spring-context:3.0.0.RELEASE",
					"org.springframework:spring-expression:3.0.0.RELEASE",
					"org.springframework:spring-test:3.0.0.RELEASE",
					"log4j:log4j:1.2.14"
					
}

sourceSets {
	main {
		compileClasspath = compileClasspath + configurations.providedCompile
		runtimeClasspath = runtimeClasspath + configurations.providedCompile
	}
	test {
		compileClasspath = compileClasspath + configurations.providedCompile
		runtimeClasspath = runtimeClasspath + configurations.providedCompile
	}
}

task 'cleanGenlib' << { 
	ant.delete(dir: "${projectDir}/src/main/genlib")
	ant.delete(dir: "${projectDir}/src/test/genlib")
}
clean.dependsOn cleanGenlib

afterEvaluate { project ->
	def closure = { d ->
		project.dependencies {
			sources ((d.group?: '') + ':' + d.name + ':' + (d.version?: '') + ':sources@jar')
		}
	}
	project.configurations.compile.dependencies.each closure
	project.configurations.providedCompile.dependencies.each closure
	project.configurations.testCompile.dependencies.each closure
}

task 'genlib'(description: 'Copies the 3rd party libraries to genlib folder') << {
	
	project.copy {
		from configurations.compile.files
        into 'src/main/genlib'
    }
    
	project.copy {
		from configurations.testRuntime.files
		from configurations.providedCompile.files
        from configurations.sources.files
        into 'src/test/genlib'
    }
        
}
compileJava.dependsOn  'genlib'

uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.deployerJars
        repository(url: "scp://web.sourceforge.net:/home/groups/l/lo/loom/htdocs/repository")
        snapshotRepository(url: "scp://web.sourceforge.net:/home/groups/l/lo/loom/htdocs/snapshots")
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	from javadoc.destinationDir
    classifier = 'javadoc'
}

task sourcesJar(type: Jar, dependsOn: compileJava) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

/* uncomment with gradle 0.9 to generate sources and javadoc jar files */
artifacts {
    archives javadocJar
    archives sourcesJar
} 

task 'zipDist'(type: Zip, dependsOn: javadoc) {
	into("$archivesBaseName-${version}") {
		from(libsDir)
		from(projectDir) {
			include 'README'
			include 'LICENSE'
		}
		from(configurations.runtime.resolve()) {
			into 'lib'
		} 
	}
}
