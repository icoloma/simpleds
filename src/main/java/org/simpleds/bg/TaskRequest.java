package org.simpleds.bg;

import java.util.Enumeration;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;

import com.google.appengine.api.datastore.Cursor;
import com.google.common.collect.Maps;

/**
 * Cointains the data passed to a task
 *  
 * @author icoloma
 *
 */
public class TaskRequest implements Cloneable {

	/** the id of the task to execute */
	public static final String TASK_PARAM = "_task";
	
	/** the cursor request parameter. Will be not null if this is a deferred task */
	public static final String CURSOR_PARAM = "_cursor";

	/** the URI that received this request */
	private String uri;
	
	/** the parameters received with this request */
	private Map<String, String> params;
	
	/** the attributes generated by the current task */
	private Map<String, Object> attributes = Maps.newHashMap();
	
	public TaskRequest(HttpServletRequest request) {
		
		this.uri = request.getRequestURI();
		
		// extract the queueURL and the params
		params = Maps.newHashMap();
		for (Enumeration<String> e = request.getParameterNames(); e.hasMoreElements(); ) {
			String name = e.nextElement();
			params.put(name, request.getParameter(name));
		}
		
	}
	
	public TaskRequest(String uri, Map<String, String> params) {
		this.uri = uri;
		this.params = params;
	}
	
	/**
	 * Sets the current Cursor parameter value
	 * @param cursor the cursor to apply. May be null.
	 * @return this same instance, with the cursor parameter set to the new value (or removed if null)
	 */
	public TaskRequest withCursor(Cursor cursor) {
		if (cursor != null) {
			String sc = cursor.toWebSafeString();
			setParameter(CURSOR_PARAM, sc);
		} else {
			removeParameter(CURSOR_PARAM);
		}
		return this;
	}
	
	/**
	 * @return the cursor received by theis request, null if none
	 */
	public Cursor getCursor() {
		String s = getParameter(CURSOR_PARAM);
		return s == null? null : Cursor.fromWebSafeString(s);
	}
	
	/**
	 * @return the task ID that should be executed
	 */
	public String getTaskId() {
		String taskId = getParameter(TASK_PARAM);
		if (taskId == null || taskId.length() == 0) {
			throw new IllegalArgumentException("Missing " + TaskRequest.TASK_PARAM + " parameter");
		}
		return taskId;
	}
	/*
	public void setTaskId(String taskID) {
		setParameter(TASK_PARAM, taskID);
	}*/
	
	@Override
	protected TaskRequest clone() {
		TaskRequest copy = new TaskRequest(uri, Maps.newHashMap(params));
		copy.attributes = Maps.newHashMap(attributes);
		return copy;
	}
	
	public Set<String> getParameterNames() {
		return params.keySet();
	}
	
	public String getParameter(String name) {
		return params.get(name);
	}
	
	public TaskRequest setParameter(String name, String value) {
		params.put(name, value);
		return this;
	}
	
	public Object removeParameter(String name) {
		return params.remove(name);
	}
	
	public Set<String> getAttributeNames() {
		return attributes.keySet();
	}
	
	public Object getAttribute(String name) {
		return attributes.get(name);
	}
	
	public TaskRequest setAttribute(String name, Object value) {
		attributes.put(name, value);
		return this;
	}
	
	public Object removeAttribute(String name) {
		return attributes.remove(name);
	}

	public String getUri() {
		return uri;
	}
	
}
